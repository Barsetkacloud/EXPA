
## ========-> Для создание всяких вещей в Laravel надо :      
---- cmd - в нем перейти в папку с laravel, где файл artisan , это корень папки (команда - "cd" в помощь)      


#### ========-> Что бы на сайт заходить не через адресс "localhost/public", а через localhost:8000 то запускаем : -> php artisan serve     


### I.   Создать контроллер:                         php artisan make:controller NameController
### II.  Создать миграцию:                           php artisan make:migration create_tasks_table --create=tasks     
### II.  Создать модель:                             php artisan make:model Task  
### III.  Создать миграцию и модель:                 php artisan make:model Name -m     
### III. Запуск миграций (создание таблиц):          php artisan migrate
### IV.  Просмотра маршрутов (routes):               php artisan route:list
### IV.  DatabaseSeeder - это тестовые записи в БД:  php artisan db:seed      
### VI. Middleware:                                  php artisan make:middleware NameMiddleware  
  


#### ========-> Вывовод на страницу делаеться так же как в MVC
----- передача данных в view -> return view('post.index', ['posts' => $posts]); где $posts это массив данных


#### ========-> для работы link_to_route() и для  
####   href="{!! URL::asset('assets/css/booter/css/bootstrap.css') !!}"     
1.в composer.js после - "laravel/framework": "5.2.", надо дописать :   "laravelcollective/html": "~5.0"    
2. написать в cmd(предварительно перейти в папку где лежит 'artisan') : php composer.phar update    
3. в папке config/ открыть - app.php, там найти массив 'providers'  в конец которого добавить :     'Collective\Html\HtmlServiceProvider',    
4. в том же файле в массив aliases - в конец - 'Form' => 'Collective\Html\FormFacade',     
                                              'Html' => 'Collective\Html\HtmlFacade',         


#### ========-> Комментирование в шаблонизаторe Blade
{{-- Это комментарий --}}   


#### ========-> В МАршрутах лучше не писать пути с нижним подчеркиванием потом это не воркаЕТ !!


#### ========-> Отправка формы AJAX (И без отправления в заголовке Токена тоже работает при методе POST !!!)
Если через метод GET - то норм все отправляеться нормально (пишешь в маршрутах путь, потом отсылаешь данные туда)    
Метод POST - по-другому ---- надо вставить в начало страницы такое : <meta name="csrf-token" content="{{ csrf_token() }}" />
и в ajax.js прописать настройки(заголовки) для ajax:
                                                 $.ajaxSetup({
                                                          headers: {
                                                                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                                                             }
                                                      }); 



#### ========-> При вставке может возникнуть ошибка SQL с словом Update_at или Created_at - это ругаеться на timestamp
Решение : написать в классe той модели которой юзаешь----: public $timestamps = false;

### ========->Регистрация своего Middleware(filters) в файле Kernel.php массив $routeMiddleware(не глобал), $middleware(глобал)
              'myauth' => \App\Http\Middleware\AuthMiddleware::class, // My Middleware     
              
### ========-> Cookies (Get, Delete, Set)
- Установка кук:   $cookie1 = cookie('email', $userData['email'], 2880);
                   $cookie2 = cookie('id'   , $userData['id'], 2880);
                   return  response($resData)->cookie($cookie1)->cookie($cookie2);
- Достать куку :  public function GetCookie(Request $request, $name)
                  {
                    return $request->cookie($name);
                  }
- Удалить куку:   public function DelCookie($name)
                   {
                    $cookie = cookie()->forget('cookiename');
                    return    response('cookie has been deleted')->withCookie($cookie);
                  }                  
